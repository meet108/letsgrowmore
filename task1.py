# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o82oDoB_h3P9xiXb4c1nthEUzxepAcqE

**LetsGrowMore Virtual Internship Program**

**Data Science**

**Author:- Meet Shah**

**Task-1:- Iris Flowers Classification Machine Learning Project**
"""

from google.colab import drive
drive.mount('/content/drive')

"""Importing Libraries"""

import numpy as np
import pandas as pd
import matplotlib .pyplot as plt
import seaborn as sns

"""Import dataset"""

data = pd.read_csv('/content/drive/MyDrive/datascience/Iris.csv')

"""Printing First 5 elements from the Dataset"""

data.head(5)

"""Printing Last 5 elements from the Dataset"""

data.tail(5)

"""Checking for Null Value if any"""

data.isnull().sum()

"""To know the number of columns and rows in the dataset"""

data.shape

"""Describe the Data"""

data.describe()

data.columns

"""To know number of unique values in each Column"""

data.nunique()

"""Providing Info about the Data"""

data.info()

"""Dropping the Column which is not needed"""

data = data.drop(columns=['Id'])

X=data[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]
Y=data[['Species']]

"""TRAIN-TEST SPLIT"""

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.25)

X_train.head()

"""SCALING TECHNIQUES

MinMax Scaler
"""

from sklearn.preprocessing import MinMaxScaler
mms=MinMaxScaler()
X_train_min=mms.fit_transform(X_train)
X_test_min=mms.transform(X_test)

"""Standard Scaler"""

from sklearn.preprocessing import StandardScaler
ss=StandardScaler()
X_train_norm=ss.fit_transform(X_train)
X_test_norm=ss.transform(X_test)

"""Machine Learning Models
K-Nearest Neighbour Algorithm

K-NN algorithm assumes the similarity between the new case/data and available cases and put the new case into the category that is most similar to the available categories.
"""

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=6)
knn.fit(X_train_min,Y_train)
prediction=knn.predict(X_test_min)

from sklearn.metrics import accuracy_score
accuracy=accuracy_score(Y_test,prediction)
print(accuracy)

"""Random Forest Algorithm

As the name suggests, "Random Forest is a classifier that contains a number of decision trees on various subsets of the given dataset and takes the average to improve the predictive accuracy of that dataset."
"""

from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier(n_estimators=100)
rf.fit(X_train_min,Y_train)
prediction=rf.predict(X_test_min)

from sklearn.metrics import accuracy_score
accuracy=accuracy_score(Y_test,prediction)
print(accuracy)

"""Naive Bayes Algorithm

Na√Øve Bayes algorithm is a supervised learning algorithm, which is based on Bayes theorem and used for solving classification problems. It is mainly used in text classification that includes a high-dimensional training dataset.
"""

from sklearn.naive_bayes import GaussianNB
nb=GaussianNB()
nb.fit(X_train_min,Y_train)
prediction=nb.predict(X_test_min)

from sklearn.metrics import accuracy_score
accuracy=accuracy_score(Y_test,prediction)
print(accuracy)

"""Decision Tree

It is a tree-structured classifier, where internal nodes represent the features of a dataset, branches represent the decision rules and each leaf node represents the outcome.
"""

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier(criterion='gini',max_depth=1,random_state=0)
dt.fit(X_train_min,Y_train)
prediction=dt.predict(X_test_min)

from sklearn.metrics import accuracy_score
accuracy=accuracy_score(Y_test,prediction)
print(accuracy)

"""DATA VISUALIZATION
Box Plots:- In descriptive statistics, a box plot or boxplot is a method for graphically demonstrating the locality, spread and skewness groups of numerical data through their quartiles
"""

sns.boxplot(x="Species",y="SepalLengthCm",data=data)
plt.show()

sns.boxplot(x="Species",y="PetalLengthCm",data=data)
plt.show()

sns.boxplot(x="Species",y="SepalWidthCm",data=data)
plt.show()

sns.boxplot(x="Species",y="PetalWidthCm",data=data)
plt.show()

"""Pair Plot:- Pair Plots are a really simple way to visualize relationships between each variable. It produces a matrix of relationships between each variable in your data for an instant examination of our data."""

sns.pairplot(data,hue='Species')

